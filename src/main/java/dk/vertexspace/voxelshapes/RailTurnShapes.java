package dk.vertexspace.voxelshapes;
import net.minecraft.block.Block;
import net.minecraft.util.math.shapes.IBooleanFunction;
import net.minecraft.util.math.shapes.VoxelShape;
import net.minecraft.util.math.shapes.VoxelShapes;
import java.util.stream.Stream;

public class RailTurnShapes {
	private RailTurnShapes(){}
	public static final VoxelShape S_UP_NE = Stream.of(
		Block.makeCuboidShape(10, 0, 0, 14, 1, 6),
		Block.makeCuboidShape(6, 0, 10, 16, 1, 14),
		Block.makeCuboidShape(14, 0, 2, 16, 1, 6),
		Block.makeCuboidShape(2, 0, 0, 6, 1, 14),
		Block.makeCuboidShape(12, 1, 0, 13, 3, 3),
		Block.makeCuboidShape(12, 1, 3, 16, 3, 4),
		Block.makeCuboidShape(4, 1, 12, 16, 3, 13),
		Block.makeCuboidShape(11, 1, 0, 12, 3, 5),
		Block.makeCuboidShape(12, 1, 4, 16, 3, 5),
		Block.makeCuboidShape(5, 1, 11, 16, 3, 12),
		Block.makeCuboidShape(4, 1, 0, 5, 3, 12),
		Block.makeCuboidShape(3, 1, 0, 4, 3, 13),
		Block.makeCuboidShape(6, 0, 4.5, 10, 0.9000000000000004, 5.5),
		Block.makeCuboidShape(10.5, 0, 6, 11.5, 0.9000000000000004, 10)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_UP_SE = Stream.of(
		Block.makeCuboidShape(10, 0, 10, 16, 1, 14),
		Block.makeCuboidShape(2, 0, 6, 6, 1, 16),
		Block.makeCuboidShape(10, 0, 14, 14, 1, 16),
		Block.makeCuboidShape(2, 0, 2, 16, 1, 6),
		Block.makeCuboidShape(13, 1, 12, 16, 3, 13),
		Block.makeCuboidShape(12, 1, 12, 13, 3, 16),
		Block.makeCuboidShape(3, 1, 4, 4, 3, 16),
		Block.makeCuboidShape(11, 1, 11, 16, 3, 12),
		Block.makeCuboidShape(11, 1, 12, 12, 3, 16),
		Block.makeCuboidShape(4, 1, 5, 5, 3, 16),
		Block.makeCuboidShape(4, 1, 4, 16, 3, 5),
		Block.makeCuboidShape(3, 1, 3, 16, 3, 4),
		Block.makeCuboidShape(10.5, 0, 6, 11.5, 0.9000000000000004, 10),
		Block.makeCuboidShape(6, 0, 10.5, 10, 0.9000000000000004, 11.5)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_UP_SW = Stream.of(
		Block.makeCuboidShape(2, 0, 10, 6, 1, 16),
		Block.makeCuboidShape(0, 0, 2, 10, 1, 6),
		Block.makeCuboidShape(0, 0, 10, 2, 1, 14),
		Block.makeCuboidShape(10, 0, 2, 14, 1, 16),
		Block.makeCuboidShape(3, 1, 13, 4, 3, 16),
		Block.makeCuboidShape(0, 1, 12, 4, 3, 13),
		Block.makeCuboidShape(0, 1, 3, 12, 3, 4),
		Block.makeCuboidShape(4, 1, 11, 5, 3, 16),
		Block.makeCuboidShape(0, 1, 11, 4, 3, 12),
		Block.makeCuboidShape(0, 1, 4, 11, 3, 5),
		Block.makeCuboidShape(11, 1, 4, 12, 3, 16),
		Block.makeCuboidShape(12, 1, 3, 13, 3, 16),
		Block.makeCuboidShape(6, 0, 10.5, 10, 0.9000000000000004, 11.5),
		Block.makeCuboidShape(4.5, 0, 6, 5.5, 0.9000000000000004, 10)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_UP_NW = Stream.of(
		Block.makeCuboidShape(0, 0, 2, 6, 1, 6),
		Block.makeCuboidShape(10, 0, 0, 14, 1, 10),
		Block.makeCuboidShape(2, 0, 0, 6, 1, 2),
		Block.makeCuboidShape(0, 0, 10, 14, 1, 14),
		Block.makeCuboidShape(0, 1, 3, 3, 3, 4),
		Block.makeCuboidShape(3, 1, 0, 4, 3, 4),
		Block.makeCuboidShape(12, 1, 0, 13, 3, 12),
		Block.makeCuboidShape(0, 1, 4, 5, 3, 5),
		Block.makeCuboidShape(4, 1, 0, 5, 3, 4),
		Block.makeCuboidShape(11, 1, 0, 12, 3, 11),
		Block.makeCuboidShape(0, 1, 11, 12, 3, 12),
		Block.makeCuboidShape(0, 1, 12, 13, 3, 13),
		Block.makeCuboidShape(4.5, 0, 6, 5.5, 0.9000000000000004, 10),
		Block.makeCuboidShape(6, 0, 4.5, 10, 0.9000000000000004, 5.5)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_DOWN_SE = Stream.of(
		Block.makeCuboidShape(10, 15, 10, 14, 16, 16),
		Block.makeCuboidShape(6, 15, 2, 16, 16, 6),
		Block.makeCuboidShape(14, 15, 10, 16, 16, 14),
		Block.makeCuboidShape(2, 15, 2, 6, 16, 16),
		Block.makeCuboidShape(12, 13, 13, 13, 15, 16),
		Block.makeCuboidShape(12, 13, 12, 16, 15, 13),
		Block.makeCuboidShape(4, 13, 3, 16, 15, 4),
		Block.makeCuboidShape(11, 13, 11, 12, 15, 16),
		Block.makeCuboidShape(12, 13, 11, 16, 15, 12),
		Block.makeCuboidShape(5, 13, 4, 16, 15, 5),
		Block.makeCuboidShape(4, 13, 4, 5, 15, 16),
		Block.makeCuboidShape(3, 13, 3, 4, 15, 16),
		Block.makeCuboidShape(6, 15.1, 10.5, 10, 16, 11.5),
		Block.makeCuboidShape(10.5, 15.1, 6, 11.5, 16, 10)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_DOWN_SW = Stream.of(
		Block.makeCuboidShape(0, 15, 10, 6, 16, 14),
		Block.makeCuboidShape(10, 15, 6, 14, 16, 16),
		Block.makeCuboidShape(2, 15, 14, 6, 16, 16),
		Block.makeCuboidShape(0, 15, 2, 14, 16, 6),
		Block.makeCuboidShape(0, 13, 12, 3, 15, 13),
		Block.makeCuboidShape(3, 13, 12, 4, 15, 16),
		Block.makeCuboidShape(12, 13, 4, 13, 15, 16),
		Block.makeCuboidShape(0, 13, 11, 5, 15, 12),
		Block.makeCuboidShape(4, 13, 12, 5, 15, 16),
		Block.makeCuboidShape(11, 13, 5, 12, 15, 16),
		Block.makeCuboidShape(0, 13, 4, 12, 15, 5),
		Block.makeCuboidShape(0, 13, 3, 13, 15, 4),
		Block.makeCuboidShape(4.5, 15.1, 6, 5.5, 16, 10),
		Block.makeCuboidShape(6, 15.1, 10.5, 10, 16, 11.5)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_DOWN_NE = Stream.of(
		Block.makeCuboidShape(2, 15, 0, 6, 16, 6),
		Block.makeCuboidShape(0, 15, 10, 10, 16, 14),
		Block.makeCuboidShape(0, 15, 2, 2, 16, 6),
		Block.makeCuboidShape(10, 15, 0, 14, 16, 14),
		Block.makeCuboidShape(3, 13, 0, 4, 15, 3),
		Block.makeCuboidShape(0, 13, 3, 4, 15, 4),
		Block.makeCuboidShape(0, 13, 12, 12, 15, 13),
		Block.makeCuboidShape(4, 13, 0, 5, 15, 5),
		Block.makeCuboidShape(0, 13, 4, 4, 15, 5),
		Block.makeCuboidShape(0, 13, 11, 11, 15, 12),
		Block.makeCuboidShape(11, 13, 0, 12, 15, 12),
		Block.makeCuboidShape(12, 13, 0, 13, 15, 13),
		Block.makeCuboidShape(6, 15.1, 4.5, 10, 16, 5.5),
		Block.makeCuboidShape(4.5, 15.1, 6, 5.5, 16, 10)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_DOWN_NW = Stream.of(
		Block.makeCuboidShape(10, 15, 2, 16, 16, 6),
		Block.makeCuboidShape(2, 15, 0, 6, 16, 10),
		Block.makeCuboidShape(10, 15, 0, 14, 16, 2),
		Block.makeCuboidShape(2, 15, 10, 16, 16, 14),
		Block.makeCuboidShape(13, 13, 3, 16, 15, 4),
		Block.makeCuboidShape(12, 13, 0, 13, 15, 4),
		Block.makeCuboidShape(3, 13, 0, 4, 15, 12),
		Block.makeCuboidShape(11, 13, 4, 16, 15, 5),
		Block.makeCuboidShape(11, 13, 0, 12, 15, 4),
		Block.makeCuboidShape(4, 13, 0, 5, 15, 11),
		Block.makeCuboidShape(4, 13, 11, 16, 15, 12),
		Block.makeCuboidShape(3, 13, 12, 16, 15, 13),
		Block.makeCuboidShape(10.5, 15.1, 6, 11.5, 16, 10),
		Block.makeCuboidShape(6, 15.1, 4.5, 10, 16, 5.5)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_NORTH_DE = Stream.of(
		Block.makeCuboidShape(10, 0, 15, 14, 6, 16),
		Block.makeCuboidShape(6, 10, 15, 16, 14, 16),
		Block.makeCuboidShape(14, 2, 15, 16, 6, 16),
		Block.makeCuboidShape(2, 0, 15, 6, 14, 16),
		Block.makeCuboidShape(12, 0, 13, 13, 3, 15),
		Block.makeCuboidShape(12, 3, 13, 16, 4, 15),
		Block.makeCuboidShape(4, 12, 13, 16, 13, 15),
		Block.makeCuboidShape(11, 0, 13, 12, 5, 15),
		Block.makeCuboidShape(12, 4, 13, 16, 5, 15),
		Block.makeCuboidShape(5, 11, 13, 16, 12, 15),
		Block.makeCuboidShape(4, 0, 13, 5, 12, 15),
		Block.makeCuboidShape(3, 0, 13, 4, 13, 15),
		Block.makeCuboidShape(6, 4.5, 15.1, 10, 5.5, 16),
		Block.makeCuboidShape(10.5, 6, 15.1, 11.5, 10, 16)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_NORTH_UE = Stream.of(
		Block.makeCuboidShape(10, 10, 15, 16, 14, 16),
		Block.makeCuboidShape(2, 6, 15, 6, 16, 16),
		Block.makeCuboidShape(10, 14, 15, 14, 16, 16),
		Block.makeCuboidShape(2, 2, 15, 16, 6, 16),
		Block.makeCuboidShape(13, 12, 13, 16, 13, 15),
		Block.makeCuboidShape(12, 12, 13, 13, 16, 15),
		Block.makeCuboidShape(3, 4, 13, 4, 16, 15),
		Block.makeCuboidShape(11, 11, 13, 16, 12, 15),
		Block.makeCuboidShape(11, 12, 13, 12, 16, 15),
		Block.makeCuboidShape(4, 5, 13, 5, 16, 15),
		Block.makeCuboidShape(4, 4, 13, 16, 5, 15),
		Block.makeCuboidShape(3, 3, 13, 16, 4, 15),
		Block.makeCuboidShape(10.5, 6, 15.1, 11.5, 10, 16),
		Block.makeCuboidShape(6, 10.5, 15.1, 10, 11.5, 16)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_NORTH_UW = Stream.of(
		Block.makeCuboidShape(2, 10, 15, 6, 16, 16),
		Block.makeCuboidShape(0, 2, 15, 10, 6, 16),
		Block.makeCuboidShape(0, 10, 15, 2, 14, 16),
		Block.makeCuboidShape(10, 2, 15, 14, 16, 16),
		Block.makeCuboidShape(3, 13, 13, 4, 16, 15),
		Block.makeCuboidShape(0, 12, 13, 4, 13, 15),
		Block.makeCuboidShape(0, 3, 13, 12, 4, 15),
		Block.makeCuboidShape(4, 11, 13, 5, 16, 15),
		Block.makeCuboidShape(0, 11, 13, 4, 12, 15),
		Block.makeCuboidShape(0, 4, 13, 11, 5, 15),
		Block.makeCuboidShape(11, 4, 13, 12, 16, 15),
		Block.makeCuboidShape(12, 3, 13, 13, 16, 15),
		Block.makeCuboidShape(6, 10.5, 15.1, 10, 11.5, 16),
		Block.makeCuboidShape(4.5, 6, 15.1, 5.5, 10, 16)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_NORTH_DW = Stream.of(
		Block.makeCuboidShape(0, 2, 15, 6, 6, 16),
		Block.makeCuboidShape(10, 0, 15, 14, 10, 16),
		Block.makeCuboidShape(2, 0, 15, 6, 2, 16),
		Block.makeCuboidShape(0, 10, 15, 14, 14, 16),
		Block.makeCuboidShape(0, 3, 13, 3, 4, 15),
		Block.makeCuboidShape(3, 0, 13, 4, 4, 15),
		Block.makeCuboidShape(12, 0, 13, 13, 12, 15),
		Block.makeCuboidShape(0, 4, 13, 5, 5, 15),
		Block.makeCuboidShape(4, 0, 13, 5, 4, 15),
		Block.makeCuboidShape(11, 0, 13, 12, 11, 15),
		Block.makeCuboidShape(0, 11, 13, 12, 12, 15),
		Block.makeCuboidShape(0, 12, 13, 13, 13, 15),
		Block.makeCuboidShape(4.5, 6, 15.1, 5.5, 10, 16),
		Block.makeCuboidShape(6, 4.5, 15.1, 10, 5.5, 16)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_SOUTH_UE = Stream.of(
		Block.makeCuboidShape(10, 10, 0, 14, 16, 1),
		Block.makeCuboidShape(6, 2, 0, 16, 6, 1),
		Block.makeCuboidShape(14, 10, 0, 16, 14, 1),
		Block.makeCuboidShape(2, 2, 0, 6, 16, 1),
		Block.makeCuboidShape(12, 13, 1, 13, 16, 3),
		Block.makeCuboidShape(12, 12, 1, 16, 13, 3),
		Block.makeCuboidShape(4, 3, 1, 16, 4, 3),
		Block.makeCuboidShape(11, 11, 1, 12, 16, 3),
		Block.makeCuboidShape(12, 11, 1, 16, 12, 3),
		Block.makeCuboidShape(5, 4, 1, 16, 5, 3),
		Block.makeCuboidShape(4, 4, 1, 5, 16, 3),
		Block.makeCuboidShape(3, 3, 1, 4, 16, 3),
		Block.makeCuboidShape(6, 10.5, 0, 10, 11.5, 0.9000000000000004),
		Block.makeCuboidShape(10.5, 6, 0, 11.5, 10, 0.9000000000000004)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_SOUTH_UW = Stream.of(
		Block.makeCuboidShape(0, 10, 0, 6, 14, 1),
		Block.makeCuboidShape(10, 6, 0, 14, 16, 1),
		Block.makeCuboidShape(2, 14, 0, 6, 16, 1),
		Block.makeCuboidShape(0, 2, 0, 14, 6, 1),
		Block.makeCuboidShape(0, 12, 1, 3, 13, 3),
		Block.makeCuboidShape(3, 12, 1, 4, 16, 3),
		Block.makeCuboidShape(12, 4, 1, 13, 16, 3),
		Block.makeCuboidShape(0, 11, 1, 5, 12, 3),
		Block.makeCuboidShape(4, 12, 1, 5, 16, 3),
		Block.makeCuboidShape(11, 5, 1, 12, 16, 3),
		Block.makeCuboidShape(0, 4, 1, 12, 5, 3),
		Block.makeCuboidShape(0, 3, 1, 13, 4, 3),
		Block.makeCuboidShape(4.5, 6, 0, 5.5, 10, 0.9000000000000004),
		Block.makeCuboidShape(6, 10.5, 0, 10, 11.5, 0.9000000000000004)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_SOUTH_DW = Stream.of(
		Block.makeCuboidShape(2, 0, 0, 6, 6, 1),
		Block.makeCuboidShape(0, 10, 0, 10, 14, 1),
		Block.makeCuboidShape(0, 2, 0, 2, 6, 1),
		Block.makeCuboidShape(10, 0, 0, 14, 14, 1),
		Block.makeCuboidShape(3, 0, 1, 4, 3, 3),
		Block.makeCuboidShape(0, 3, 1, 4, 4, 3),
		Block.makeCuboidShape(0, 12, 1, 12, 13, 3),
		Block.makeCuboidShape(4, 0, 1, 5, 5, 3),
		Block.makeCuboidShape(0, 4, 1, 4, 5, 3),
		Block.makeCuboidShape(0, 11, 1, 11, 12, 3),
		Block.makeCuboidShape(11, 0, 1, 12, 12, 3),
		Block.makeCuboidShape(12, 0, 1, 13, 13, 3),
		Block.makeCuboidShape(6, 4.5, 0, 10, 5.5, 0.9000000000000004),
		Block.makeCuboidShape(4.5, 6, 0, 5.5, 10, 0.9000000000000004)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_SOUTH_DE = Stream.of(
		Block.makeCuboidShape(10, 2, 0, 16, 6, 1),
		Block.makeCuboidShape(2, 0, 0, 6, 10, 1),
		Block.makeCuboidShape(10, 0, 0, 14, 2, 1),
		Block.makeCuboidShape(2, 10, 0, 16, 14, 1),
		Block.makeCuboidShape(13, 3, 1, 16, 4, 3),
		Block.makeCuboidShape(12, 0, 1, 13, 4, 3),
		Block.makeCuboidShape(3, 0, 1, 4, 12, 3),
		Block.makeCuboidShape(11, 4, 1, 16, 5, 3),
		Block.makeCuboidShape(11, 0, 1, 12, 4, 3),
		Block.makeCuboidShape(4, 0, 1, 5, 11, 3),
		Block.makeCuboidShape(4, 11, 1, 16, 12, 3),
		Block.makeCuboidShape(3, 12, 1, 16, 13, 3),
		Block.makeCuboidShape(10.5, 6, 0, 11.5, 10, 0.9000000000000004),
		Block.makeCuboidShape(6, 4.5, 0, 10, 5.5, 0.9000000000000004)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_WEST_UN = Stream.of(
		Block.makeCuboidShape(15, 10, 0, 16, 14, 6),
		Block.makeCuboidShape(15, 6, 10, 16, 16, 14),
		Block.makeCuboidShape(15, 14, 2, 16, 16, 6),
		Block.makeCuboidShape(15, 2, 0, 16, 6, 14),
		Block.makeCuboidShape(13, 12, 0, 15, 13, 3),
		Block.makeCuboidShape(13, 12, 3, 15, 16, 4),
		Block.makeCuboidShape(13, 4, 12, 15, 16, 13),
		Block.makeCuboidShape(13, 11, 0, 15, 12, 5),
		Block.makeCuboidShape(13, 12, 4, 15, 16, 5),
		Block.makeCuboidShape(13, 5, 11, 15, 16, 12),
		Block.makeCuboidShape(13, 4, 0, 15, 5, 12),
		Block.makeCuboidShape(13, 3, 0, 15, 4, 13),
		Block.makeCuboidShape(15.1, 6, 4.5, 16, 10, 5.5),
		Block.makeCuboidShape(15.1, 10.5, 6, 16, 11.5, 10)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_WEST_US = Stream.of(
		Block.makeCuboidShape(15, 10, 10, 16, 16, 14),
		Block.makeCuboidShape(15, 2, 6, 16, 6, 16),
		Block.makeCuboidShape(15, 10, 14, 16, 14, 16),
		Block.makeCuboidShape(15, 2, 2, 16, 16, 6),
		Block.makeCuboidShape(13, 13, 12, 15, 16, 13),
		Block.makeCuboidShape(13, 12, 12, 15, 13, 16),
		Block.makeCuboidShape(13, 3, 4, 15, 4, 16),
		Block.makeCuboidShape(13, 11, 11, 15, 16, 12),
		Block.makeCuboidShape(13, 11, 12, 15, 12, 16),
		Block.makeCuboidShape(13, 4, 5, 15, 5, 16),
		Block.makeCuboidShape(13, 4, 4, 15, 16, 5),
		Block.makeCuboidShape(13, 3, 3, 15, 16, 4),
		Block.makeCuboidShape(15.1, 10.5, 6, 16, 11.5, 10),
		Block.makeCuboidShape(15.1, 6, 10.5, 16, 10, 11.5)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_WEST_DS = Stream.of(
		Block.makeCuboidShape(15, 2, 10, 16, 6, 16),
		Block.makeCuboidShape(15, 0, 2, 16, 10, 6),
		Block.makeCuboidShape(15, 0, 10, 16, 2, 14),
		Block.makeCuboidShape(15, 10, 2, 16, 14, 16),
		Block.makeCuboidShape(13, 3, 13, 15, 4, 16),
		Block.makeCuboidShape(13, 0, 12, 15, 4, 13),
		Block.makeCuboidShape(13, 0, 3, 15, 12, 4),
		Block.makeCuboidShape(13, 4, 11, 15, 5, 16),
		Block.makeCuboidShape(13, 0, 11, 15, 4, 12),
		Block.makeCuboidShape(13, 0, 4, 15, 11, 5),
		Block.makeCuboidShape(13, 11, 4, 15, 12, 16),
		Block.makeCuboidShape(13, 12, 3, 15, 13, 16),
		Block.makeCuboidShape(15.1, 6, 10.5, 16, 10, 11.5),
		Block.makeCuboidShape(15.1, 4.5, 6, 16, 5.5, 10)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_WEST_DN = Stream.of(
		Block.makeCuboidShape(15, 0, 2, 16, 6, 6),
		Block.makeCuboidShape(15, 10, 0, 16, 14, 10),
		Block.makeCuboidShape(15, 2, 0, 16, 6, 2),
		Block.makeCuboidShape(15, 0, 10, 16, 14, 14),
		Block.makeCuboidShape(13, 0, 3, 15, 3, 4),
		Block.makeCuboidShape(13, 3, 0, 15, 4, 4),
		Block.makeCuboidShape(13, 12, 0, 15, 13, 12),
		Block.makeCuboidShape(13, 0, 4, 15, 5, 5),
		Block.makeCuboidShape(13, 4, 0, 15, 5, 4),
		Block.makeCuboidShape(13, 11, 0, 15, 12, 11),
		Block.makeCuboidShape(13, 0, 11, 15, 12, 12),
		Block.makeCuboidShape(13, 0, 12, 15, 13, 13),
		Block.makeCuboidShape(15.1, 4.5, 6, 16, 5.5, 10),
		Block.makeCuboidShape(15.1, 6, 4.5, 16, 10, 5.5)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_EAST_DN = Stream.of(
		Block.makeCuboidShape(0, 2, 0, 1, 6, 6),
		Block.makeCuboidShape(0, 0, 10, 1, 10, 14),
		Block.makeCuboidShape(0, 0, 2, 1, 2, 6),
		Block.makeCuboidShape(0, 10, 0, 1, 14, 14),
		Block.makeCuboidShape(1, 3, 0, 3, 4, 3),
		Block.makeCuboidShape(1, 0, 3, 3, 4, 4),
		Block.makeCuboidShape(1, 0, 12, 3, 12, 13),
		Block.makeCuboidShape(1, 4, 0, 3, 5, 5),
		Block.makeCuboidShape(1, 0, 4, 3, 4, 5),
		Block.makeCuboidShape(1, 0, 11, 3, 11, 12),
		Block.makeCuboidShape(1, 11, 0, 3, 12, 12),
		Block.makeCuboidShape(1, 12, 0, 3, 13, 13),
		Block.makeCuboidShape(0, 6, 4.5, 0.9000000000000004, 10, 5.5),
		Block.makeCuboidShape(0, 4.5, 6, 0.9000000000000004, 5.5, 10)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_EAST_UN = Stream.of(
		Block.makeCuboidShape(0, 10, 2, 1, 16, 6),
		Block.makeCuboidShape(0, 2, 0, 1, 6, 10),
		Block.makeCuboidShape(0, 10, 0, 1, 14, 2),
		Block.makeCuboidShape(0, 2, 10, 1, 16, 14),
		Block.makeCuboidShape(1, 13, 3, 3, 16, 4),
		Block.makeCuboidShape(1, 12, 0, 3, 13, 4),
		Block.makeCuboidShape(1, 3, 0, 3, 4, 12),
		Block.makeCuboidShape(1, 11, 4, 3, 16, 5),
		Block.makeCuboidShape(1, 11, 0, 3, 12, 4),
		Block.makeCuboidShape(1, 4, 0, 3, 5, 11),
		Block.makeCuboidShape(1, 4, 11, 3, 16, 12),
		Block.makeCuboidShape(1, 3, 12, 3, 16, 13),
		Block.makeCuboidShape(0, 10.5, 6, 0.9000000000000004, 11.5, 10),
		Block.makeCuboidShape(0, 6, 4.5, 0.9000000000000004, 10, 5.5)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_EAST_US = Stream.of(
		Block.makeCuboidShape(0, 10, 10, 1, 14, 16),
		Block.makeCuboidShape(0, 6, 2, 1, 16, 6),
		Block.makeCuboidShape(0, 14, 10, 1, 16, 14),
		Block.makeCuboidShape(0, 2, 2, 1, 6, 16),
		Block.makeCuboidShape(1, 12, 13, 3, 13, 16),
		Block.makeCuboidShape(1, 12, 12, 3, 16, 13),
		Block.makeCuboidShape(1, 4, 3, 3, 16, 4),
		Block.makeCuboidShape(1, 11, 11, 3, 12, 16),
		Block.makeCuboidShape(1, 12, 11, 3, 16, 12),
		Block.makeCuboidShape(1, 5, 4, 3, 16, 5),
		Block.makeCuboidShape(1, 4, 4, 3, 5, 16),
		Block.makeCuboidShape(1, 3, 3, 3, 4, 16),
		Block.makeCuboidShape(0, 6, 10.5, 0.9000000000000004, 10, 11.5),
		Block.makeCuboidShape(0, 10.5, 6, 0.9000000000000004, 11.5, 10)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
	public static final VoxelShape S_EAST_DS = Stream.of(
		Block.makeCuboidShape(0, 0, 10, 1, 6, 14),
		Block.makeCuboidShape(0, 10, 6, 1, 14, 16),
		Block.makeCuboidShape(0, 2, 14, 1, 6, 16),
		Block.makeCuboidShape(0, 0, 2, 1, 14, 6),
		Block.makeCuboidShape(1, 0, 12, 3, 3, 13),
		Block.makeCuboidShape(1, 3, 12, 3, 4, 16),
		Block.makeCuboidShape(1, 12, 4, 3, 13, 16),
		Block.makeCuboidShape(1, 0, 11, 3, 5, 12),
		Block.makeCuboidShape(1, 4, 12, 3, 5, 16),
		Block.makeCuboidShape(1, 11, 5, 3, 12, 16),
		Block.makeCuboidShape(1, 0, 4, 3, 12, 5),
		Block.makeCuboidShape(1, 0, 3, 3, 13, 4),
		Block.makeCuboidShape(0, 4.5, 6, 0.9000000000000004, 5.5, 10),
		Block.makeCuboidShape(0, 6, 10.5, 0.9000000000000004, 10, 11.5)).reduce((v1, v2) -> VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR)).get();
}